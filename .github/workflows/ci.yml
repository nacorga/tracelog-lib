name: CI

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  validate:
    name: Validate Changes
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'
          scope: '@tracelog'
          cache: 'npm'

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: |
          rm -rf node_modules
          npm ci

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Make scripts executable
        run: chmod +x scripts/*.js

      - name: Dependencies Security Check
        run: |
          echo "🔍 Checking dependencies for vulnerabilities..."
          npm audit --audit-level high || {
            echo "❌ Security vulnerabilities found"
            npm audit
            exit 1
          }
          echo "✅ No high-severity vulnerabilities found"

      - name: Code Quality Check
        run: |
          echo "🔍 Running code quality checks..."
          npm run check
          echo "✅ Code quality checks passed"

      - name: Run Unit Tests
        run: |
          echo "🔍 Running unit tests..."
          npm run test:unit:ci
          echo "✅ Unit tests passed"

      - name: Generate Test Coverage Report
        run: |
          echo "🔍 Generating test coverage report..."
          npm run test:coverage

      - name: Validate Code Coverage
        run: |
          echo "🔍 Validating code coverage threshold (minimum 70%)..."

          # Check if coverage summary exists
          if [[ ! -f "coverage/coverage-summary.json" ]]; then
            echo "❌ Coverage summary not found"
            exit 1
          fi

          # Extract total line coverage percentage
          COVERAGE=$(node -p "
            const summary = require('./coverage/coverage-summary.json');
            Math.floor(summary.total.lines.pct);
          ")

          echo "📊 Current coverage: ${COVERAGE}%"

          if [[ $COVERAGE -lt 70 ]]; then
            echo "❌ Coverage ${COVERAGE}% is below minimum threshold of 70%"
            exit 1
          fi

          echo "✅ Coverage ${COVERAGE}% meets minimum threshold"

      - name: Run Integration Tests
        run: |
          echo "🔍 Running integration tests..."
          npm run test:integration

      - name: Build Integrity Check
        run: |
          echo "🔍 Testing build integrity..."
          # Clean previous builds
          rm -rf dist || true

          # Run full build
          npm run build:all

          # Verify build outputs
          required_files=(
            "dist/esm/public-api.js"
            "dist/esm/public-api.d.ts"
            "dist/cjs/public-api.js"
            "dist/browser/tracelog.js"
          )

          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Missing build output: $file"
              exit 1
            fi
          done

          # Check file sizes (basic sanity check)
          browser_build="dist/browser/tracelog.js"
          size_kb=$(du -k "$browser_build" | cut -f1)

          if [[ $size_kb -gt 100 ]]; then
            echo "⚠️ Browser build is large: ${size_kb}KB"
          fi

          echo "✅ Build completed successfully. Browser build: ${size_kb}KB"

      - name: Run E2E Tests with Health Analysis
        run: |
          echo "🔍 Running E2E tests with health analysis..."
          npm run test:e2e

      - name: Upload test results (if tests fail)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ github.event.pull_request.number || 'main' }}
          path: |
            playwright-report/
            test-results/
            coverage/
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.event.pull_request.number || 'main' }}
          path: coverage/
          retention-days: 30
          if-no-files-found: ignore

      - name: Package Configuration Check
        run: |
          echo "🔍 Validating package configuration..."

          # Check required fields
          required_fields=("name" "version" "description" "main" "module" "types")
          for field in "${required_fields[@]}"; do
            if ! node -p "require('./package.json').$field" > /dev/null 2>&1; then
              echo "❌ Missing required field: $field"
              exit 1
            fi
          done

          # Check exports configuration
          if ! node -p "require('./package.json').exports" > /dev/null 2>&1; then
            echo "❌ Missing exports configuration"
            exit 1
          fi

          # Check files array
          if ! node -p "require('./package.json').files.length > 0" > /dev/null 2>&1; then
            echo "❌ Missing or empty files array"
            exit 1
          fi

          # Validate version format
          version=$(node -p "require('./package.json').version")
          if ! echo "$version" | grep -qE "^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$"; then
            echo "❌ Invalid version format: $version"
            exit 1
          fi

          echo "✅ Package configuration is valid"

      - name: Validation Summary
        if: success()
        run: |
          echo ""
          echo "🎉 All validation checks passed!"
          echo "✅ No security vulnerabilities"
          echo "✅ Code quality passed"
          echo "✅ Unit tests passed"
          echo "✅ Code coverage ≥60%"
          echo "✅ Integration tests passed"
          echo "✅ Build integrity verified"
          echo "✅ E2E tests passed"
          echo "✅ Package configuration valid"
          echo ""
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "✅ Pull request is ready for merge!"
          else
            echo "🚀 Main branch is healthy and ready for release!"
          fi