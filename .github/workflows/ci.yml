name: CI

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write
  packages: write
  id-token: write

jobs:
  validate:
    name: Validate Changes
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'
          scope: '@tracelog'
          cache: 'npm'

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Make scripts executable
        run: chmod +x scripts/*.js

      - name: Dependencies Security Check
        run: |
          echo "🔍 Checking dependencies for vulnerabilities..."
          npm audit --audit-level high || {
            echo "❌ Security vulnerabilities found"
            npm audit
            exit 1
          }
          echo "✅ No high-severity vulnerabilities found"

      - name: Code Quality Check
        run: |
          echo "🔍 Running code quality checks..."
          npm run check
          echo "✅ Code quality checks passed"

      - name: Run Unit Tests
        run: |
          echo "🔍 Running unit tests..."
          npm run test:unit:ci
          echo "✅ Unit tests passed"

      - name: Generate Test Coverage Report
        run: |
          echo "🔍 Generating test coverage report..."
          npm run test:coverage

      - name: Validate Code Coverage
        run: |
          echo "🔍 Validating code coverage threshold (minimum 70%)..."

          # Check if coverage summary exists
          if [[ ! -f "coverage/coverage-summary.json" ]]; then
            echo "❌ Coverage summary not found"
            exit 1
          fi

          # Extract total line coverage percentage
          COVERAGE=$(node -p "
            const summary = require('./coverage/coverage-summary.json');
            Math.floor(summary.total.lines.pct);
          ")

          echo "📊 Current coverage: ${COVERAGE}%"

          if [[ $COVERAGE -lt 70 ]]; then
            echo "❌ Coverage ${COVERAGE}% is below minimum threshold of 70%"
            exit 1
          fi

          echo "✅ Coverage ${COVERAGE}% meets minimum threshold"

      - name: Run Integration Tests
        run: |
          echo "🔍 Running integration tests..."
          npm run test:integration

      - name: Build Integrity Check
        run: |
          echo "🔍 Testing build integrity..."
          # Clean previous builds
          rm -rf dist || true

          # Run full build
          npm run build:all

          # Verify build outputs
          required_files=(
            "dist/public-api.js"
            "dist/public-api.d.ts"
            "dist/public-api.cjs"
            "dist/browser/tracelog.js"
            "dist/browser/tracelog.esm.js"
          )

          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Missing build output: $file"
              exit 1
            fi
          done

          # Check file sizes (basic sanity check)
          browser_build="dist/browser/tracelog.js"
          size_kb=$(du -k "$browser_build" | cut -f1)

          if [[ $size_kb -gt 100 ]]; then
            echo "⚠️ Browser build is large: ${size_kb}KB"
          fi

          echo "✅ Build completed successfully. Browser build: ${size_kb}KB"

      - name: Run E2E Tests with Health Analysis
        run: |
          echo "🔍 Running E2E tests with health analysis..."
          npm run test:e2e

      - name: Upload test results (if tests fail)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ github.event.pull_request.number || 'main' }}
          path: |
            playwright-report/
            test-results/
            coverage/
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.event.pull_request.number || 'main' }}
          path: coverage/
          retention-days: 30
          if-no-files-found: ignore

      - name: Package Configuration Check
        run: |
          echo "🔍 Validating package configuration..."

          # Check required fields
          required_fields=("name" "version" "description" "main" "module" "types")
          for field in "${required_fields[@]}"; do
            if ! node -p "require('./package.json').$field" > /dev/null 2>&1; then
              echo "❌ Missing required field: $field"
              exit 1
            fi
          done

          # Check exports configuration
          if ! node -p "require('./package.json').exports" > /dev/null 2>&1; then
            echo "❌ Missing exports configuration"
            exit 1
          fi

          # Check files array
          if ! node -p "require('./package.json').files.length > 0" > /dev/null 2>&1; then
            echo "❌ Missing or empty files array"
            exit 1
          fi

          # Validate version format
          version=$(node -p "require('./package.json').version")
          if ! echo "$version" | grep -qE "^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$"; then
            echo "❌ Invalid version format: $version"
            exit 1
          fi

          echo "✅ Package configuration is valid"

      - name: Validation Summary
        if: success()
        run: |
          echo ""
          echo "🎉 All validation checks passed!"
          echo "✅ No security vulnerabilities"
          echo "✅ Code quality passed"
          echo "✅ Unit tests passed"
          echo "✅ Code coverage ≥70%"
          echo "✅ Integration tests passed"
          echo "✅ Build integrity verified"
          echo "✅ E2E tests passed"
          echo "✅ Package configuration valid"
          echo ""
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "✅ Pull request is ready for merge!"
          else
            echo "🚀 Main branch is healthy and ready for release!"
          fi

  publish-rc:
    name: Publish RC Version
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'
          scope: '@tracelog'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ github.event.pull_request.number }}
          path: coverage/
        continue-on-error: true

      - name: Build all outputs
        run: |
          echo "🔍 Building all outputs for RC publication..."
          npm run build:all
          echo "✅ Build completed"

      - name: Generate RC version
        id: rc-version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Get PR number
          PR_NUMBER="${{ github.event.pull_request.number }}"

          # Get commit count for this PR (to increment rc number on updates)
          COMMIT_COUNT=$(git rev-list --count origin/main..HEAD)

          # Generate RC version: current-version-rc.PR_NUMBER.COMMIT_COUNT
          RC_VERSION="${CURRENT_VERSION}-rc.${PR_NUMBER}.${COMMIT_COUNT}"

          echo "RC version: $RC_VERSION"
          echo "rc_version=$RC_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          RC_VERSION="${{ steps.rc-version.outputs.rc_version }}"
          echo "📝 Updating package.json to version: $RC_VERSION"

          # Update version in package.json (without committing)
          npm version "$RC_VERSION" --no-git-tag-version

          echo "✅ Version updated to $RC_VERSION"

      - name: Publish to NPM with 'next' tag
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          RC_VERSION="${{ steps.rc-version.outputs.rc_version }}"
          echo "📦 Publishing v$RC_VERSION to NPM with 'next' tag..."

          # Publish to npm with 'next' tag (won't override 'latest')
          npm publish --tag next || { echo "❌ Publish failed"; exit 1; }

          echo "✅ Published v$RC_VERSION to NPM"
          echo "💡 Install with: npm install @tracelog/lib@$RC_VERSION"
          echo "💡 Or: npm install @tracelog/lib@next"

      - name: Verify NPM publication
        run: |
          RC_VERSION="${{ steps.rc-version.outputs.rc_version }}"
          echo "🔍 Verifying publication on NPM..."

          # Wait for NPM to propagate
          sleep 20

          # Check if version exists on NPM
          if npm view "@tracelog/lib@$RC_VERSION" version > /dev/null 2>&1; then
            echo "✅ Package successfully published to NPM"
            echo "📦 Version: $RC_VERSION"
          else
            echo "❌ Package verification failed"
            exit 1
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const rcVersion = '${{ steps.rc-version.outputs.rc_version }}';
            const prNumber = context.issue.number;

            const comment = `## 🚀 RC Version Published

            **Version:** \`${rcVersion}\`
            **NPM Tag:** \`next\`

            ✅ All CI checks passed before publication

            ### Installation

            Install this specific RC version:
            \`\`\`bash
            npm install @tracelog/lib@${rcVersion}
            \`\`\`

            Or install the latest RC from this PR:
            \`\`\`bash
            npm install @tracelog/lib@next
            \`\`\`

            ---

            💡 **Note:** RC versions are published with the \`next\` tag and won't affect the \`latest\` stable release.`;

            // Find existing RC comment to update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('RC Version Published')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }

      - name: Publication summary
        run: |
          echo ""
          echo "🎉 RC Publication completed successfully!"
          echo "📦 Version: ${{ steps.rc-version.outputs.rc_version }}"
          echo "🏷️  NPM Tag: next"
          echo "🔗 NPM Package: https://www.npmjs.com/package/@tracelog/lib/v/${{ steps.rc-version.outputs.rc_version }}"
          echo ""

  notify-rc-failure:
    name: Notify RC Publication Failure
    runs-on: ubuntu-latest
    needs: [validate, publish-rc]
    if: failure() && needs.publish-rc.result == 'failure'

    steps:
      - name: Comment failure on PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;

            const comment = `## ❌ RC Publication Failed

            All CI checks passed, but the RC version publication to NPM failed.

            Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

            Common issues:
            - NPM authentication issues (\`NPM_TOKEN\` secret)
            - Network connectivity to NPM registry
            - Version already exists on NPM

            The PR is still valid and can be merged. RC publication is optional and can be retried.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [validate, publish-rc]
    if: always()

    steps:
      - name: Check if all required jobs passed
        run: |
          echo "🔍 Checking status of all required jobs..."
          echo ""
          echo "Validate job: ${{ needs.validate.result }}"
          echo "Publish RC job: ${{ needs.publish-rc.result }}"
          echo ""

          # Validate must succeed
          if [[ "${{ needs.validate.result }}" != "success" ]]; then
            echo "❌ Validate job failed"
            exit 1
          fi

          # Publish RC can be skipped (when not a PR) but not failed
          if [[ "${{ needs.publish-rc.result }}" == "failure" ]]; then
            echo "⚠️ RC publication failed, but validation passed"
            echo "✅ PR can still be merged (RC is optional)"
            exit 0
          fi

          echo "✅ All required checks passed!"
          echo "✅ PR is ready to merge"