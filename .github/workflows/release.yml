name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - patch
        - minor
        - major
      force_version:
        description: 'Force specific version (e.g., 1.2.3)'
        required: false
        type: string
      skip_tests:
        description: 'Skip test suite'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  check-release-needed:
    name: Check Release Needed
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check-release.outputs.should-release }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Check if release is needed
        id: check-release
        run: |
          # Check if this is a manual trigger or if there are releasable commits
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "üì¶ Manual release triggered"
          else
            # Check for conventional commits that warrant a release
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [[ -z "$LAST_TAG" ]]; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "üéâ No previous tags, first release"
            else
              COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" 2>/dev/null || echo "")
              if echo "$COMMITS" | grep -qE "^(feat|fix|perf|docs|style|refactor|test|chore|ci|build)(\(.+\))?:" || echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
                echo "should-release=true" >> $GITHUB_OUTPUT
                echo "üöÄ Found conventional commits requiring release"
              else
                echo "should-release=false" >> $GITHUB_OUTPUT
                echo "‚è≠Ô∏è No releasable commits found"
              fi
            fi
          fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check-release-needed
    if: needs.check-release-needed.outputs.should-release == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'
          scope: '@tracelog'
          cache: 'npm'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Make scripts executable
        run: chmod +x scripts/*.js

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Verify CI Status
        run: |
          echo "üîç Verifying main branch passed all CI checks..."
          echo "‚úÖ Release triggered from validated main branch"
          echo "üìù Note: All tests were validated by CI workflow"
          echo "üöÄ Proceeding with release preparation"

      - name: Prepare release (update version, changelog, commit)
        run: |
          # Build release command based on inputs
          RELEASE_CMD="node scripts/release.js"

          # Add dry run flag if requested
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            RELEASE_CMD="$RELEASE_CMD --dry-run"
          fi

          # Add version type or force version
          if [[ -n "${{ github.event.inputs.force_version }}" ]]; then
            RELEASE_CMD="$RELEASE_CMD --force-version ${{ github.event.inputs.force_version }}"
          elif [[ "${{ github.event.inputs.version_type }}" != "auto" ]]; then
            # For manual version types, we'll modify the release script to accept this
            case "${{ github.event.inputs.version_type }}" in
              "major"|"minor"|"patch")
                # We could implement a --force-bump-type flag in the release script
                echo "Manual version type: ${{ github.event.inputs.version_type }}"
                ;;
            esac
          fi

          # Add verbose flag for GitHub Actions
          RELEASE_CMD="$RELEASE_CMD --verbose"

          echo "Executing: $RELEASE_CMD"
          eval $RELEASE_CMD

      - name: Get release version
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Release version: $VERSION"

      - name: Push release commit
        if: github.event.inputs.dry_run != 'true'
        run: |
          git push origin main
          echo "‚úÖ Release commit pushed to main"

      - name: Create git tag
        if: github.event.inputs.dry_run != 'true'
        run: |
          git tag -a v${{ steps.get-version.outputs.version }} -m "Release v${{ steps.get-version.outputs.version }}"
          git push origin v${{ steps.get-version.outputs.version }}
          echo "‚úÖ Git tag v${{ steps.get-version.outputs.version }} created and pushed"

      - name: Publish to NPM
        if: github.event.inputs.dry_run != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "üì¶ Publishing to NPM..."
          npm publish
          echo "‚úÖ Published v${{ steps.get-version.outputs.version }} to NPM"

      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          echo "üìù Creating GitHub Release for v${VERSION}..."

          gh release create "v${VERSION}" \
            --title "Release v${VERSION}" \
            --notes "Release v${VERSION}

          For detailed changes, see [CHANGELOG.md](./CHANGELOG.md).

          ## Installation

          \`\`\`bash
          npm install @tracelog/lib@${VERSION}
          \`\`\`

          ## Documentation

          See [README.md](./README.md) for usage instructions." \
            dist/browser/tracelog.js#tracelog-${VERSION}.js

          echo "‚úÖ GitHub Release created for v${VERSION}"

      - name: Post-release validation
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "üîç Verifying package publication on NPM..."
          TARGET_VERSION="${{ steps.get-version.outputs.version }}"

          # Configuration: NPM registry propagation retry settings
          MAX_RETRIES=5
          RETRY_DELAY=10  # seconds between retries

          # Wait and retry NPM version check (NPM registry propagation can take time)
          for i in $(seq 1 $MAX_RETRIES); do
            PACKAGE_VERSION=$(npm view @tracelog/lib version 2>/dev/null || echo "")

            if [[ "$PACKAGE_VERSION" == "$TARGET_VERSION" ]]; then
              echo "‚úÖ Package successfully published to NPM (version: $PACKAGE_VERSION)"
              exit 0
            fi

            if [[ $i -lt $MAX_RETRIES ]]; then
              echo "‚è≥ Waiting for NPM registry to propagate... (attempt $i/$MAX_RETRIES, current: $PACKAGE_VERSION, expected: $TARGET_VERSION)"
              sleep $RETRY_DELAY
            fi
          done

          echo "‚ùå Package version mismatch on NPM after $MAX_RETRIES attempts"
          echo "   Expected: $TARGET_VERSION"
          echo "   Found: $PACKAGE_VERSION"
          exit 1

      - name: Cleanup RC versions
        if: github.event.inputs.dry_run != 'true'
        continue-on-error: true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "üßπ Cleaning up RC versions from npm..."

          # Configuration: NPM registry stabilization delay
          STABILIZATION_DELAY=5  # seconds to wait for registry stabilization

          # Wait a moment to ensure stable version is fully propagated before cleanup
          echo "‚è≥ Waiting for NPM registry stabilization..."
          sleep $STABILIZATION_DELAY

          # Get all versions with 'next' tag (RC versions)
          RC_VERSIONS=$(npm view @tracelog/lib versions --json 2>/dev/null | jq -r '.[] | select(contains("-rc."))' || echo "")

          if [[ -z "$RC_VERSIONS" ]]; then
            echo "‚úÖ No RC versions found to clean up"
            exit 0
          fi

          echo "Found RC versions to unpublish:"
          echo "$RC_VERSIONS"

          # Unpublish each RC version
          UNPUBLISHED_COUNT=0
          FAILED_COUNT=0

          while IFS= read -r version; do
            if [[ -n "$version" ]]; then
              echo "Unpublishing @tracelog/lib@$version..."
              if npm unpublish "@tracelog/lib@$version" --force 2>/dev/null; then
                echo "  ‚úÖ Unpublished $version"
                ((UNPUBLISHED_COUNT++))
              else
                echo "  ‚ö†Ô∏è  Failed to unpublish $version (may already be removed)"
                ((FAILED_COUNT++))
              fi
            fi
          done <<< "$RC_VERSIONS"

          echo ""
          echo "üßπ Cleanup summary:"
          echo "  Unpublished: $UNPUBLISHED_COUNT RC versions"
          if [[ $FAILED_COUNT -gt 0 ]]; then
            echo "  Failed/Skipped: $FAILED_COUNT versions"
          fi
          echo "‚úÖ RC cleanup completed"

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [check-release-needed, release]
    if: always() && needs.release.result == 'success'

    steps:
      - name: Release Success Notification
        run: |
          echo "üéâ Release completed successfully!"
          echo "Version: ${{ needs.release.outputs.version }}"
          echo "üì¶ Package published to NPM"
          echo "üîó Check the release at: ${{ github.server_url }}/${{ github.repository }}/releases"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [check-release-needed, release]
    if: always() && (needs.check-release-needed.result == 'failure' || needs.release.result == 'failure')

    steps:
      - name: Release Failure Notification
        run: |
          echo "‚ùå Release failed!"
          echo "üîç Check the workflow logs for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "üí° Note: All validations should pass in CI before attempting release"
          exit 1