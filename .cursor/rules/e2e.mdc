---
alwaysApply: false
---

# E2E Testing Guide for TraceLog SDK

**Playwright-based E2E testing guide for browser interaction testing**

## üéØ Objectives

- **Browser Validation**: Test TraceLog SDK functionality across different browsers and devices
- **User Journey Testing**: Validate complete user flows and interactions
- **Integration Verification**: Ensure SDK integrates properly with web applications
- **Error Handling**: Verify graceful degradation and error scenarios

## üèóÔ∏è Architecture

```
tests/
‚îú‚îÄ‚îÄ e2e/                         # Playwright test files
‚îÇ   ‚îú‚îÄ‚îÄ initialization/          # SDK initialization tests
‚îÇ   ‚îú‚îÄ‚îÄ session-management/      # Session lifecycle tests
‚îÇ   ‚îú‚îÄ‚îÄ event-tracking/          # Event capture tests
‚îÇ   ‚îî‚îÄ‚îÄ [other-categories]/      # Organized by functionality
‚îú‚îÄ‚îÄ fixtures/                    # Test HTML pages and assets
‚îÇ   ‚îú‚îÄ‚îÄ index.html               # Main test page
‚îÇ   ‚îú‚îÄ‚îÄ tracelog.js              # Built SDK for testing
‚îÇ   ‚îî‚îÄ‚îÄ pages/                   # Additional test pages
‚îî‚îÄ‚îÄ utils/                       # Test utilities and helpers
    ‚îî‚îÄ‚îÄ test.helpers.ts          # Common testing functions
    ‚îî‚îÄ‚îÄ [other-categories]/      # Common testing functions organized by functionality
```

**Test Flow**: Page Load ‚Üí SDK Init ‚Üí User Interactions ‚Üí Event Capture ‚Üí Validation

## üõ†Ô∏è Tech Stack

- **Playwright** - Cross-browser E2E testing
- **TypeScript** - Test implementation
- **http-server** - Local test server
- **Multiple browsers** - Chromium, Firefox, WebKit, Mobile

## üìù Conventions

### File Naming
- **Test files**: `kebab-case` (e.g., `invalid-project-id.spec.ts`)
- **Categories**: `kebab-case` (e.g., `session-management/`)
- **Constants**: `UPPER_SNAKE_CASE` for test values

### Code Style
```typescript
// Follow existing patterns from test.helpers.ts
test.describe('Feature Name', () => {
  test('should validate specific behavior', async ({ page }) => {
    // Setup console monitoring
    const monitor = TestHelpers.createConsoleMonitor(page);
    
    try {
      // Test implementation
      await TestHelpers.navigateAndWaitForReady(page, '/');
      // ... test logic
    } finally {
      monitor.cleanup();
    }
  });
});
```

### Configuration
- IMPORTANT: Always initialize the SDK in E2E tests with `{ id: 'test' }`. This special test project id is required for the E2E environment to avoid external calls and ensure deterministic behavior.

### Logging
- Add logs at strategic points to detect errors or anomalies.
- Keep logs clear and concise; avoid describing correct/expected behavior.
- Logs must never interfere with test outcomes or control flow.
- Prefer centralized console monitoring via `TestHelpers.createConsoleMonitor()`.

### Test Structure
- **Setup**: Console monitoring, page navigation
- **Action**: User interactions, SDK operations  
- **Validation**: Assertions, error checking
- **Cleanup**: Resource cleanup in `finally` blocks

## üöÄ Common Commands

```bash
# Run all E2E tests
npm run test:e2e

# Start test server (separate terminal)
npm run serve:test

# Build SDK for testing
npm run build:browser

# Fix code format using prettier and eslint
npm run fix

# Full test pipeline (build + test)
npm run test:e2e  # Includes build step

# Test specific browser
npx playwright test --project=chromium
npx playwright test --project="Mobile Chrome"

# Debug mode
npx playwright test --debug
npx playwright test --headed

# Generate test report
npx playwright show-report
```

## üîç Test Patterns

### Basic Test Structure
```typescript
import { test, expect } from '@playwright/test';
import { TestHelpers, TestAssertions } from '../../../utils/test.helpers';

test.describe('Feature Category', () => {
  const TEST_CONFIG = { id: 'test' };

  test('should validate expected behavior', async ({ page }) => {
    const monitor = TestHelpers.createConsoleMonitor(page);

    try {
      // Navigate and initialize
      await TestHelpers.navigateAndWaitForReady(page, '/');
      const initResult = await TestHelpers.initializeTraceLog(page, TEST_CONFIG);
      
      // Validate initialization
      const validated = TestAssertions.verifyInitializationResult(initResult);
      expect(validated.success).toBe(true);
      
      // Test specific functionality
      await TestHelpers.triggerClickEvent(page);
      
      // Verify results
      expect(TestAssertions.verifyNoTraceLogErrors(monitor.traceLogErrors)).toBe(true);
    } finally {
      monitor.cleanup();
    }
  });
});
```

### Helper Usage
```typescript
// Navigation
await TestHelpers.navigateAndWaitForReady(page, '/custom-page');

// SDK Operations
await TestHelpers.initializeTraceLog(page, { id: 'test' });
await TestHelpers.testCustomEvent(page, 'event_name', { data: 'value' });

// Interactions
await TestHelpers.triggerClickEvent(page, 'button[data-testid="cta"]');
await TestHelpers.triggerScrollEvent(page);

// Validations
const isInitialized = await TestHelpers.isTraceLogInitialized(page);
const storageKeys = await TestHelpers.getTraceLogStorageKeys(page);
```

## ‚ö†Ô∏è What NOT to Do

### üö´ Test Structure
- **DON'T** write tests without console monitoring and cleanup
- **DON'T** skip error validation - always check for unexpected errors
- **DON'T** hardcode timeouts - use `TestHelpers.waitForTimeout()`
- **DON'T** test without proper page ready states

### üö´ Browser Compatibility
- **DON'T** assume all browsers support the same APIs
- **DON'T** use browser-specific features without fallback testing
- **DON'T** ignore mobile browser differences (touch vs mouse events)
- **DON'T** test only in one browser during development

### üö´ Async Operations
- **DON'T** forget `await` for all async operations
- **DON'T** use `setTimeout()` - use `page.waitForTimeout()`
- **DON'T** skip waiting for page load states
- **DON'T** chain promises without proper error handling

### üö´ Test Data
- **DON'T** rely on external services - tests should be isolated
- **DON'T** leave test data in localStorage between tests
- **DON'T** use production API endpoints in tests
- **DON'T** commit sensitive test data or credentials

### üö´ Performance
- **DON'T** run tests with missing cleanup - causes memory leaks
- **DON'T** use excessive waits - impacts test execution time
- **DON'T** skip parallel execution optimization
- **DON'T** ignore flaky tests - fix root causes

## üéØ Quick Start

```bash
# 1. Build SDK for testing
npm run build:browser

# 2. Start test server (separate terminal)
npm run serve:test

# 3. Run tests
npm run test:e2e

# 4. View results
npx playwright show-report
```

### Debug Test Issues
```bash
# Run specific test with debugging
npx playwright test tests/e2e/initialization --debug

# Run with browser UI visible
npx playwright test --headed

# Generate trace for failed tests
npx playwright test --trace=on
```

**Key Success Metrics**: All browsers pass, no console errors, proper cleanup, realistic user interactions

## üõ°Ô∏è Test Success Requirements

### Mandatory Test Passing
- **All tests must pass successfully** - No failing tests should be accepted
- **Cross-browser compatibility** - Tests must pass on all configured browsers (Chromium, Firefox, WebKit, Mobile)
- **Zero test regression** - New tests or changes cannot break existing tests
- **Clean test execution** - No console errors, memory leaks, or resource cleanup issues

### Implementation Standards
- **Apply necessary changes only** - Modify code strictly as needed for test success, avoiding over-engineering. Address any logic anomalies, errors, or clear opportunities for improvement in the source code, but ensure changes do not compromise existing functionality.  
- **Maintain test isolation** - Each test must be independent and not interfere with others.  
- **Preserve existing patterns** - Follow the established test structure, conventions, and helper utilities.  
- **Validate thoroughly** - Include comprehensive assertions and error checks to ensure reliability.

### Continuous Improvement
- **Identify improvement opportunities** during test implementation or maintenance
- **Implement enhancements** that improve test reliability, performance, or maintainability
- **Balance improvements vs. risk** - Only apply improvements that don't compromise existing test success
- **Document significant changes** in test structure or helper functions

### Quality Gates
```bash
# Before committing changes, verify:
npm run test:e2e                    # All tests pass
npm run check                       # Code style compliance
npm run build:all                   # Build succeeds
npm run fix                         # Format code style and detect eslint errors

# Verify cross-browser compatibility
npx playwright test --project=chromium
npx playwright test --project=firefox
npx playwright test --project=webkit
```

**Success Criteria**: 100% test pass rate across all browsers with zero regressions and measurable improvements where applicable