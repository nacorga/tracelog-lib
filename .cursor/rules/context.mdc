---
alwaysApply: true
---

# TraceLog SDK

**JavaScript library for web analytics and real-time event tracking**

## 🎯 Purpose

Event tracking SDK that automatically captures user interactions (clicks, scroll, navigation, web performance) and allows custom events. Includes cross-tab session management, session recovery, Google Analytics integration, and sampling capabilities.

## 🏗️ Architecture

```
src/
├── api.ts                 # Public API (init, event, destroy)
├── app.ts                 # Main class orchestrating all managers
├── handlers/              # Specific event capture
│   ├── click.handler.ts   # Click tracking
│   ├── scroll.handler.ts  # Scroll tracking
│   ├── session.handler.ts # Session management
│   └── performance.handler.ts # Web vitals
├── managers/              # Core business logic
│   ├── event.manager.ts   # Event queue and sending
│   ├── session.manager.ts # Session lifecycle
│   ├── storage.manager.ts # localStorage abstraction
│   └── state.manager.ts   # Shared global state
├── integrations/          # External integrations
├── utils/                 # Utilities and validations
└── types/                 # TypeScript definitions
```

**Main flow**: `init()` → Configuration → Active handlers → EventManager → Queue → Send

## 🛠️ Tech Stack

- **TypeScript 5.7** - Static typing
- **Vite** - Build tool and bundler
- **web-vitals 4.2** - Only dependency (performance metrics)
- **Playwright** - E2E testing
- **ESLint + Prettier** - Linting and formatting

## 📝 Code Conventions

### Lint & Format
```bash
npm run check      # Verify lint + format
npm run fix        # Auto-fix lint + format
```

### Naming
- **Classes**: `PascalCase` (e.g.: `EventManager`)
- **Files**: `kebab-case.type.ts` (e.g.: `session.manager.ts`)
- **Public methods**: `camelCase`
- **Private methods**: `camelCase` with `private` prefix
- **Constants**: `UPPER_SNAKE_CASE`

### Patterns
- **Managers**: Extend `StateManager` for global state access
- **Handlers**: Classes that capture specific DOM events
- **Types**: Interfaces in separate `.types.ts` files
- **Utils**: Pure functions, organized by domain

## 🚀 Common Commands

```bash
# Build
npm run build           # TypeScript build (dual: ESM + CJS)
npm run build:browser   # Browser build (Vite)
npm run build:all       # Complete build (ESM + CJS)
npm run build-ugly      # Minified build with UglifyJS

# Development
npm run serve:test      # Local test server (port 3000)
npm run test:e2e        # End-to-end tests with Playwright

# Quality
npm run lint            # ESLint
npm run format          # Prettier
npm run check           # Lint + format (verification)
npm run fix             # Auto-fix lint + format
```

## 🔍 Critical Paths

### 1. Initialization
`api.init()` → `App.init()` → `setState()` → `initHandlers()` → Active listeners

### 2. Event Tracking
DOM Event → Handler → `EventManager.track()` → Queue → `SenderManager` → API

### 3. Session Management
Activity → `SessionManager` → Cross-tab sync → Recovery if fails

### 4. Data Sending
Batch queue → Validation → `sendEventsQueue()` → Auto-retry if fails

## ⚠️ WHAT NOT TO DO

### 🚫 Dependencies & Build
- **DON'T** add new dependencies without justification - only `web-vitals` allowed
- **DON'T** break dual ESM/CJS compatibility - maintain `exports` in package.json
- **DON'T** change `dist/` structure - affects user imports
- **DON'T** commit without passing `npm run check`

### 🚫 Security
- **DON'T** store sensitive data in localStorage
- **DON'T** send PII without sanitization (use `sanitize.utils.ts`)
- **DON'T** allow execution of unvalidated code
- **DON'T** expose internal APIs in browser build

### 🚫 Performance
- **DON'T** create memory leaks - always `cleanup()` in handlers
- **DON'T** block main thread - use `passive: true` in listeners
- **DON'T** send high-frequency events without throttling
- **DON'T** store infinite queue (limit: `MAX_EVENTS_QUEUE_LENGTH`)

### 🚫 State & Sessions
- **DON'T** mutate `globalState` directly - use `StateManager.set()`
- **DON'T** create multiple `App` instances simultaneously
- **DON'T** call `init()` before checking `typeof window !== 'undefined'`
- **DON'T** ignore session recovery errors - can cause data loss

## 🎯 Common Tasks

### Development
```bash
# Local setup for testing
npm run serve:test      # Terminal 1: server
npm run test:e2e        # Terminal 2: E2E tests

# Pre-commit verification
npm run check           # Lint + format
npm run build:all       # Verify builds
```

### Debug
```typescript
// Enable debug mode
await TraceLog.init({ 
  id: 'your-project', 
  qaMode: true  // Detailed console logs
});

// Check state in localStorage (prefix 'tl:')
// Review BroadcastChannel for cross-tab sessions
```

### Add functionality
```typescript
// 1. Create handler in handlers/
// 2. Register in App.initHandlers()
// 3. Add types in types/
// 4. Validations in utils/validations/
// 5. E2E tests in tests/
```