---
alwaysApply: true
---

# TraceLog Library

**JavaScript library for web analytics and real-time event tracking**

## 🎯 Purpose

Event tracking library that automatically captures user interactions (clicks, scrolls, navigation, web performance) and supports custom events. Features cross-tab session management, session recovery, Google Analytics integration, and event sampling.

## 🏗️ Architecture

```
src/
├── api.ts                      # Public API (init, event, destroy)
├── app.ts                      # Main orchestrator class managing handlers and state
├── test-bridge.ts              # E2E testing bridge (dev mode only)
├── handlers/                   # Event capture handlers
│   ├── click.handler.ts        # Click tracking
│   ├── scroll.handler.ts       # Scroll tracking
│   ├── session.handler.ts      # Session management
│   ├── performance.handler.ts  # Web vitals capture
│   ├── error.handler.ts        # JavaScript error tracking
│   ├── page-view.handler.ts    # Page navigation tracking
│   └── viewport.handler.ts     # Element visibility tracking
├── managers/                   # Core business logic and state management
│   ├── event.manager.ts        # Event queue and dispatching
│   ├── session.manager.ts      # Session lifecycle management
│   ├── storage.manager.ts      # localStorage abstraction
│   ├── state.manager.ts        # Global shared state management
│   ├── sender.manager.ts       # Event transmission to backend
│   └── user.manager.ts         # User identification and tracking
├── listeners/                  # Low-level event listener management
│   ├── activity-listener-manager.ts    # User activity detection
│   ├── input-listener-managers.ts      # Form input tracking
│   ├── touch-listener-manager.ts       # Touch event handling
│   ├── unload-listener-manager.ts      # Page unload detection
│   └── visibility-listener-manager.ts  # Page visibility changes
├── integrations/               # Third-party integrations
├── constants/                  # Configuration constants
├── utils/                      # Utility functions and validation helpers
│   ├── browser/                # Browser detection and capabilities
│   ├── data/                   # Data transformation utilities
│   ├── network/                # Network request helpers
│   ├── security/               # Sanitization and security
│   └── validations/            # Input validation helpers
└── types/                      # TypeScript type definitions
```

**Main flow**: `init()` → Configure → Activate handlers → EventManager queues → SenderManager sends events

## 🛠️ Tech Stack

- **TypeScript 5.7** - Strong typing and latest features
- **Vite** - Fast build tool and bundler
- **web-vitals 4.2** - Only runtime dependency for performance metrics
- **Vitest** - Unit and integration testing framework
- **Playwright** - End-to-end testing framework
- **ESLint + Prettier** - Code linting and formatting

## 📦 Current Version

**v0.11.1** - Client-only library with optional backend integrations

## 🌐 SSR/SSG Support

Safe to import in SSR frameworks (Angular Universal, Next.js, Nuxt, SvelteKit). All methods silently no-op in Node.js environments.


## 📝 Code Conventions

### Lint \& Format

```bash
npm run check      # Lint and format verification
npm run fix        # Auto-fix linting and formatting issues
```


### Naming

- Classes: `PascalCase` (e.g., `EventManager`)
- Files: `kebab-case.type.ts` (e.g., `session.manager.ts`)
- Public methods: `camelCase`
- Private methods: `camelCase` prefixed with `private`
- Constants: `UPPER_SNAKE_CASE`


### Patterns

- Managers extend `StateManager` for global state access
- Handlers are classes capturing specific DOM events
- Types declared in separate `.types.ts` files
- Utils contain pure functions grouped by domain


## 🚀 Common Commands

```bash
# Build commands
npm run build              # TypeScript build (both ESM and CJS)
npm run build:browser      # Browser-specific build using Vite
npm run build:all          # Complete build (ESM + CJS + browser)
npm run type-check         # TypeScript type checking
npm run ci:build           # CI-specific build

# Testing
npm run test:unit          # Unit tests (Vitest)
npm run test:integration   # Integration tests (Vitest)
npm run test:e2e           # E2E tests (Playwright)
npm run test               # All tests
npm run test:coverage      # Coverage report

# Development
npm run serve:test         # Start local test server (port 3000)
npm run docs:dev           # Start docs server

# Quality assurance
npm run lint               # Run ESLint
npm run format             # Run Prettier formatting
npm run check              # Run lint and format verification
npm run fix                # Auto-fix lint and format issues

# Release
npm run release:patch      # Patch version release
npm run release:minor      # Minor version release
npm run release:major      # Major version release
```


## 🔍 Critical Paths

### 1. Initialization

`api.init()` → `App.init()` → `setState()` → `initHandlers()` → event listeners active

### 2. Event Tracking

DOM event occurs → Handler captures → `EventManager.track()` queues event → `SenderManager` sends events (if backend configured)

### 3. Session Management

User activity tracked → `SessionManager` syncs across tabs → recovers session on failure

### 4. Data Sending

Events batched → Validated → Sent via `SenderManager.sendEventsQueue()` → Retries if failure detected

## 📊 Event Types

- `PAGE_VIEW` - Page navigation tracking
- `CLICK` - User click interactions
- `SCROLL` - Scroll depth and engagement
- `SESSION_START` / `SESSION_END` - Session boundaries
- `CUSTOM` - Business-specific events
- `WEB_VITALS` - Performance metrics (LCP, INP, CLS)
- `ERROR` - JavaScript error tracking
- `VIEWPORT_VISIBLE` - Element visibility tracking

## 🔌 Integration Modes

### Standalone Mode (Default - No Backend)
```typescript
await tracelog.init();
// Events tracked locally, emitted via on('event'), no HTTP calls
```

### TraceLog SaaS
```typescript
await tracelog.init({
  integrations: {
    tracelog: { projectId: 'your-project-id' }
  }
});
```

### Custom Backend
```typescript
await tracelog.init({
  integrations: {
    custom: { collectApiUrl: 'https://api.example.com/collect' }
  }
});
```

### Google Analytics / Google Tag Manager
```typescript
await tracelog.init({
  integrations: {
    google: {
      measurementId: 'G-XXXXXX',      // GA4 (optional)
      containerId: 'GTM-XXXXXXX'       // GTM (optional)
    }
  }
});
```

## ⚙️ Configuration Options

```typescript
interface Config {
  // Session
  sessionTimeout?: number;              // Session duration (15min default)

  // Metadata
  globalMetadata?: Record<string, any>; // Data added to all events

  // Privacy
  sensitiveQueryParams?: string[];      // URL parameter filtering

  // Client-side controls
  samplingRate?: number;                // Event sampling (0-1)
  errorSampling?: number;               // Error sampling (0-1)

  // Throttling
  pageViewThrottleMs?: number;          // Page view throttle
  clickThrottleMs?: number;             // Click event throttle
  maxSameEventPerMinute?: number;       // Event rate limiting

  // Scroll tracking
  scrollContainerSelectors?: string[];  // Custom scroll containers
  primaryScrollSelector?: string;       // Main scroll element

  // Viewport tracking
  viewport?: ViewportConfig;            // Element visibility tracking

  // Integrations
  integrations?: {
    tracelog?: { projectId: string; };
    custom?: { collectApiUrl: string; allowHttp?: boolean; };
    google?: { measurementId?: string; containerId?: string; };
  };

  // Testing
  allowHttp?: boolean;                  // Enable HTTP for testing
}
```

## ⚠️ WHAT NOT TO DO

### 🚫 Dependencies \& Build

- DON’T add dependencies unless absolutely necessary; only `web-vitals` is allowed
- DON’T break ESM/CJS dual compatibility; keep `exports` consistent in `package.json`
- DON’T change `dist/` folder structure
- DON’T commit without passing `npm run check`


### 🚫 Security

- DON’T store sensitive information in `localStorage`
- DON’T send Personally Identifiable Information (PII) without proper sanitization (`sanitize.utils.ts`)
- DON’T execute dynamic or unvalidated code
- DON’T expose internal-only APIs in the browser build


### 🚫 Performance

- DON’T cause memory leaks; always call `cleanup()` in handlers
- DON’T block the main thread; use passive event listeners
- DON’T send high-frequency events without throttling
- DON’T allow the event queue to grow infinitely (use `MAX_EVENTS_QUEUE_LENGTH` limit)


### 🚫 State \& Sessions

- DON’T mutate `globalState` directly; always use `StateManager.set()`
- DON’T instantiate multiple `App` instances concurrently
- DON’T call `init()` unless `typeof window !== 'undefined'`
- DON’T ignore session recovery failures to prevent data loss


## 🎯 Common Tasks

### Development

```bash
# Local development setup
npm run serve:test      # Terminal 1: start test server
npm run test:e2e        # Terminal 2: run e2e tests

# Pre-commit checks
npm run check           # Lint and format validation
npm run build:all       # Ensure build success
```


## 🧪 Testing Strategy

### Unit Tests (Vitest)
- Test individual functions and classes
- 90%+ coverage for core logic required
- Location: `tests/unit/`

### Integration Tests (Vitest)
- Test component interactions
- Verify data flow between managers
- Location: `tests/integration/`

### E2E Tests (Playwright)
- Browser-based tests using `window.__traceLogBridge`
- Test server runs on `http://localhost:3000`
- Location: `tests/e2e/`

## 🐛 Debug & QA Mode

### QA Mode (Manual Testing)
```typescript
// Activate via URL parameter
window.location.href = '?tlog_mode=qa';
// Effects:
// - Custom events logged to console (not sent to backend)
// - Strict validation (throws errors instead of silent failures)
// - Events still emitted to on('event') listeners
```

### Debug Utilities
```typescript
// Check initialization status
tracelog.isInitialized(); // boolean

// E2E Testing Bridge (dev mode only)
window.__traceLogBridge.init(config);
window.__traceLogBridge.sendCustomEvent(name, metadata);
window.__traceLogBridge.on('event', callback);
window.__traceLogBridge.on('queue', callback);
window.__traceLogBridge.getSessionData();
```


### Adding New Features

```typescript
// Steps to add new functionality

// 1. Create a new handler class under handlers/
// 2. Register the handler in App.initHandlers()
// 3. Add new types to the types/ directory
// 4. Add validation helpers if needed in utils/validations/
// 5. Write end-to-end tests under tests/
```
