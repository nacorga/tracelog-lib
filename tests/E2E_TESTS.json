{
  "e2e_tests": [
    {
      "id": "init-001",
      "title": "Library Initialization - Success",
      "category": "initialization",
      "priority": "critical",
      "description": "Validates that TraceLog.init() successfully initializes with a valid project ID, establishes API connection, creates user ID, starts session tracking, and enables all event handlers without errors.",
      "implementation_notes": "Use DEFAULT_CONFIG with valid ID, verify success=true, check app.isInitialized(), validate no console errors"
    },
    {
      "id": "init-002",
      "title": "Library Initialization - Invalid Project ID",
      "category": "initialization",
      "priority": "critical",
      "description": "Verifies that TraceLog.init() throws appropriate error when called with missing, empty, or invalid project ID, and ensures no tracking occurs.",
      "implementation_notes": "Test with {id: ''}, {id: null}, {}, expect error message 'Project ID is required', verify no app instance created"
    },
    {
      "id": "init-003",
      "title": "Library Initialization - Browser Environment Check",
      "category": "initialization",
      "priority": "critical",
      "description": "Confirms that initialization fails gracefully with clear error message when called in non-browser environments (missing window or document objects).",
      "implementation_notes": "Mock window/document as undefined, expect error 'This library can only be used in a browser environment'"
    },
    {
      "id": "init-004",
      "title": "Library Initialization - Duplicate Initialization Prevention",
      "category": "initialization",
      "priority": "critical",
      "description": "Ensures that calling TraceLog.init() multiple times doesn't create duplicate instances or interfere with existing tracking functionality.",
      "implementation_notes": "Call init() twice with same config, verify second call returns early without error, check only one instance exists"
    },
    {
      "id": "session-001",
      "title": "Session Management - Session Start",
      "category": "session-management",
      "priority": "critical",
      "description": "Validates that a new session is automatically created on first activity, generates unique session ID, tracks SESSION_START event, and persists session data to storage.",
      "implementation_notes": "Initialize library, trigger user activity, verify session created, check SESSION_START event in queue, validate localStorage persistence"
    },
    {
      "id": "event-001",
      "title": "Custom Event Tracking - Valid Events",
      "category": "event-tracking",
      "priority": "critical",
      "description": "Tests that TraceLog.event() successfully tracks custom events with valid names and metadata, sanitizes input data, and delivers events to the API endpoint.",
      "implementation_notes": "Use TraceLog.event('test_event', {key: 'value'}), verify CUSTOM event in queue with correct name and metadata"
    },
    {
      "id": "event-002",
      "title": "Page View Tracking - Initial Page Load",
      "category": "event-tracking",
      "priority": "critical",
      "description": "Validates that initial page view is tracked on library initialization with correct URL, referrer, title, and UTM parameters if present.",
      "implementation_notes": "Initialize on page with UTM params, verify PAGE_VIEW event captured with correct page_url, title, and utm data"
    },
    {
      "id": "event-003",
      "title": "Click Tracking - Interactive Elements",
      "category": "event-tracking",
      "priority": "critical",
      "description": "Validates that clicks on buttons, links, and other interactive elements are tracked with accurate coordinates, element attributes, and text content.",
      "implementation_notes": "Create test button, click it, verify CLICK event with x/y coordinates, tag, text, and element attributes"
    },
    {
      "id": "session-002",
      "title": "Session Management - Session Timeout",
      "category": "session-management",
      "priority": "high",
      "description": "Verifies that sessions properly timeout after configured inactivity period (default 15 minutes), triggers SESSION_END event with 'inactivity' reason, and cleans up session data.",
      "implementation_notes": "Set short sessionTimeout, wait for timeout, verify SESSION_END event with session_end_reason='inactivity', check localStorage cleared"
    },
    {
      "id": "session-003",
      "title": "Session Management - Custom Session Timeout",
      "category": "session-management",
      "priority": "high",
      "description": "Tests that custom session timeout values are respected, validates timeout bounds (30 seconds to 24 hours), and sessions end according to custom timeouts.",
      "implementation_notes": "Initialize with custom sessionTimeout, verify bounds validation, test timeout behavior with custom value"
    },
    {
      "id": "session-004",
      "title": "Session Management - Session Recovery",
      "category": "session-management",
      "priority": "high",
      "description": "Validates that orphaned sessions can be recovered after page reload, maintains session continuity, and properly tracks recovered sessions with session_start_recovered flag.",
      "implementation_notes": "Create session, simulate page reload, verify session recovery with session_start_recovered=true flag"
    },
    {
      "id": "event-004",
      "title": "Custom Event Tracking - Invalid Event Names",
      "category": "event-tracking",
      "priority": "high",
      "description": "Validates that invalid event names (too long, containing XSS patterns, reserved words) are rejected with appropriate error messages in QA mode.",
      "implementation_notes": "Test with long names, XSS patterns, reserved words in QA mode, expect validation errors and no events tracked"
    },
    {
      "id": "event-005",
      "title": "Custom Event Tracking - Invalid Metadata",
      "category": "event-tracking",
      "priority": "high",
      "description": "Ensures that invalid metadata (circular references, too large objects, invalid types) is rejected or sanitized properly, with clear error messages in QA mode.",
      "implementation_notes": "Test circular references, oversized objects, invalid types, verify sanitization or rejection in QA mode"
    },
    {
      "id": "event-006",
      "title": "Custom Event Tracking - Metadata Sanitization",
      "category": "event-tracking",
      "priority": "high",
      "description": "Verifies that potentially dangerous metadata (XSS patterns, script tags) is properly sanitized while preserving legitimate data.",
      "implementation_notes": "Send metadata with XSS patterns and script tags, verify sanitization removes dangerous content while keeping safe data"
    },
    {
      "id": "event-007",
      "title": "Page View Tracking - Navigation Events",
      "category": "event-tracking",
      "priority": "high",
      "description": "Tests that page view events are properly tracked for history.pushState, history.replaceState, popstate, and hashchange events with accurate from_page_url.",
      "implementation_notes": "Use simulatePageNavigation(), verify PAGE_VIEW events with correct from_page_url for each navigation type"
    },
    {
      "id": "event-008",
      "title": "Page View Tracking - URL Normalization",
      "category": "event-tracking",
      "priority": "high",
      "description": "Ensures that sensitive query parameters are removed from tracked URLs according to configuration, while preserving important URL components.",
      "implementation_notes": "Configure sensitiveQueryParams, navigate to URL with sensitive params, verify they're filtered from tracked page_url"
    },
    {
      "id": "event-009",
      "title": "Click Tracking - Custom Data Attributes",
      "category": "event-tracking",
      "priority": "high",
      "description": "Tests that elements with data-tl-name and data-tl-value attributes trigger custom events in addition to click tracking.",
      "implementation_notes": "Create element with data-tl-name='test', click it, verify both CLICK and CUSTOM events generated"
    },
    {
      "id": "event-010",
      "title": "Click Tracking - Text Content Extraction",
      "category": "event-tracking",
      "priority": "high",
      "description": "Verifies that relevant text content is extracted from clicked elements, handles large containers appropriately, and truncates excessive text.",
      "implementation_notes": "Create button with text content, click it, verify text extracted and truncated if necessary in CLICK event"
    },
    {
      "id": "event-011",
      "title": "Click Tracking - Coordinate Calculation",
      "category": "event-tracking",
      "priority": "high",
      "description": "Ensures that both absolute and relative click coordinates are calculated correctly for elements of various sizes and positions.",
      "implementation_notes": "Click elements at different positions, verify x/y absolute coordinates and relativeX/relativeY match click position"
    },
    {
      "id": "event-012",
      "title": "Scroll Tracking - Window Scroll",
      "category": "event-tracking",
      "priority": "high",
      "description": "Validates that window scroll events are debounced, tracked with accurate depth percentages and scroll direction (up/down).",
      "implementation_notes": "Use simulateScroll() to different depths, verify SCROLL events with correct depth percentage and direction"
    },
    {
      "id": "error-001",
      "title": "Error Tracking - JavaScript Errors",
      "category": "error-tracking",
      "priority": "high",
      "description": "Tests that JavaScript errors and unhandled promise rejections are captured, sanitized for PII, and tracked with appropriate sampling.",
      "implementation_notes": "Trigger JS error and promise rejection, verify ERROR events captured with sanitized messages and proper sampling"
    },
    {
      "id": "error-002",
      "title": "Error Tracking - Network Errors",
      "category": "error-tracking",
      "priority": "high",
      "description": "Validates that failed HTTP requests (fetch and XHR) are tracked with error details, status codes, and duration information.",
      "implementation_notes": "Mock failed network requests, verify ERROR events with network error details, status codes, and timing"
    },
    {
      "id": "user-001",
      "title": "User Management - User ID Generation",
      "category": "user-management",
      "priority": "high",
      "description": "Tests that unique user IDs are generated and persisted in localStorage, remain consistent across sessions, and are properly scoped by project ID.",
      "implementation_notes": "Initialize library, verify unique userId generated, check localStorage persistence and consistency across reinitializations"
    },
    {
      "id": "user-002",
      "title": "User Management - User ID Persistence",
      "category": "user-management",
      "priority": "high",
      "description": "Validates that user IDs survive browser restarts, localStorage clearing scenarios, and are recovered appropriately.",
      "implementation_notes": "Create user ID, simulate browser restart, verify ID persistence and recovery mechanisms"
    },
    {
      "id": "event-013",
      "title": "Scroll Tracking - Custom Container Scroll",
      "category": "event-tracking",
      "priority": "medium",
      "description": "Tests that scroll tracking works correctly within custom container elements specified by CSS selectors in configuration.",
      "implementation_notes": "Configure scrollContainerSelectors, create scrollable container, verify SCROLL events from container not window"
    },
    {
      "id": "event-014",
      "title": "Scroll Tracking - Scroll Suppression",
      "category": "event-tracking",
      "priority": "medium",
      "description": "Verifies that scroll events are properly suppressed immediately after page view events to avoid noise from automatic scrolling.",
      "implementation_notes": "Navigate to new page, scroll immediately, verify initial scroll events suppressed after page view"
    },
    {
      "id": "perf-001",
      "title": "Performance Tracking - Web Vitals Collection",
      "category": "performance-tracking",
      "priority": "medium",
      "description": "Tests that Core Web Vitals (LCP, CLS, FCP, TTFB, INP) are collected and reported with accurate values and proper sampling.",
      "implementation_notes": "Wait for web vitals, verify WEB_VITALS events captured with correct metrics (LCP, CLS, FCP, TTFB, INP)"
    },
    {
      "id": "perf-002",
      "title": "Performance Tracking - Long Task Detection",
      "category": "performance-tracking",
      "priority": "medium",
      "description": "Validates that long tasks are detected and tracked with appropriate throttling and sampling to avoid excessive events.",
      "implementation_notes": "Simulate long task with blocking code, verify LONG_TASK events captured with proper throttling"
    },
    {
      "id": "perf-003",
      "title": "Performance Tracking - Web Vitals Fallback",
      "category": "performance-tracking",
      "priority": "medium",
      "description": "Ensures that fallback performance tracking works when web-vitals library is unavailable, using native Performance Observer APIs.",
      "implementation_notes": "Mock web-vitals unavailable, verify fallback performance tracking using native Performance Observer"
    },
    {
      "id": "error-003",
      "title": "Error Tracking - PII Sanitization",
      "category": "error-tracking",
      "priority": "medium",
      "description": "Ensures that error messages containing emails, phone numbers, or credit card patterns are properly sanitized before tracking.",
      "implementation_notes": "Trigger errors with PII in messages, verify ERROR events have sanitized messages with PII removed"
    },
    {
      "id": "user-003",
      "title": "Device Detection - Device Type Classification",
      "category": "user-management",
      "priority": "medium",
      "description": "Tests that devices are correctly classified as mobile, tablet, or desktop based on screen size, user agent, and input capabilities.",
      "implementation_notes": "Test with different viewport sizes and user agents, verify device type classification in events"
    },
    {
      "id": "storage-001",
      "title": "Storage Management - LocalStorage Operations",
      "category": "storage-management",
      "priority": "medium",
      "description": "Validates that all storage operations (get, set, remove) work correctly and gracefully fallback to in-memory storage when localStorage is unavailable.",
      "implementation_notes": "Test storage operations, mock localStorage unavailable, verify in-memory fallback works"
    },
    {
      "id": "storage-002",
      "title": "Storage Management - Storage Key Isolation",
      "category": "storage-management",
      "priority": "medium",
      "description": "Ensures that different project IDs use isolated storage keys and don't interfere with each other's data.",
      "implementation_notes": "Initialize with different project IDs, verify storage keys are isolated and don't conflict"
    },
    {
      "id": "session-005",
      "title": "Session Management - Cross-Tab Session Coordination",
      "category": "session-management",
      "priority": "medium",
      "description": "Ensures that multiple tabs share the same session when appropriate, one tab acts as session leader, and session ends only when all tabs are closed or inactive.",
      "implementation_notes": "Open multiple tabs, verify session coordination via BroadcastChannel, test leader election"
    },
    {
      "id": "session-006",
      "title": "Session Management - Page Unload Session End",
      "category": "session-management",
      "priority": "medium",
      "description": "Verifies that sessions properly end on page unload/beforeunload events, uses synchronous methods for reliable event delivery, and tracks SESSION_END with 'page_unload' reason.",
      "implementation_notes": "Trigger page unload, verify SESSION_END event with session_end_reason='page_unload' sent synchronously"
    },
    {
      "id": "queue-001",
      "title": "Event Queue Management - Queue Processing",
      "category": "queue-management",
      "priority": "medium",
      "description": "Tests that events are properly queued, batched, and sent to the API endpoint at regular intervals with deduplication.",
      "implementation_notes": "Generate multiple events, verify queuing, batching, and deduplication in event processing"
    },
    {
      "id": "queue-002",
      "title": "Event Queue Management - Queue Persistence",
      "category": "queue-management",
      "priority": "medium",
      "description": "Validates that unsent events are persisted to storage and recovered after page reload or browser restart.",
      "implementation_notes": "Queue events, simulate page reload before sending, verify events recovered from storage"
    },
    {
      "id": "queue-003",
      "title": "Event Queue Management - Queue Size Limits",
      "category": "queue-management",
      "priority": "medium",
      "description": "Ensures that event queues don't exceed maximum size limits and oldest events are discarded when limits are reached.",
      "implementation_notes": "Generate events beyond queue limit, verify oldest events discarded to maintain size constraints"
    },
    {
      "id": "queue-004",
      "title": "Event Queue Management - Immediate Flush",
      "category": "queue-management",
      "priority": "medium",
      "description": "Tests that events can be immediately flushed using both async and sync methods, particularly during page unload scenarios.",
      "implementation_notes": "Test immediate flush functionality, verify both async and sync flush methods work correctly"
    },
    {
      "id": "config-001",
      "title": "Sampling Configuration - Event Sampling",
      "category": "configuration",
      "priority": "medium",
      "description": "Validates that sampling rates are properly applied to reduce event volume, users are consistently sampled, and QA mode bypasses sampling.",
      "implementation_notes": "Configure sampling rates, verify events sampled correctly, test QA mode bypasses sampling"
    },
    {
      "id": "config-002",
      "title": "Sampling Configuration - Web Vitals Sampling",
      "category": "configuration",
      "priority": "medium",
      "description": "Tests that web vitals events have separate sampling rates and long tasks have additional sampling reduction.",
      "implementation_notes": "Configure web vitals sampling, verify separate sampling rates for web vitals and long tasks"
    },
    {
      "id": "config-003",
      "title": "URL Exclusion - Path Exclusion",
      "category": "configuration",
      "priority": "medium",
      "description": "Verifies that events are not tracked on pages matching excluded URL path patterns, including wildcard and regex patterns.",
      "implementation_notes": "Configure excludedUrlPaths, navigate to excluded paths, verify no events tracked"
    },
    {
      "id": "config-004",
      "title": "URL Exclusion - Session Events on Excluded Paths",
      "category": "configuration",
      "priority": "medium",
      "description": "Ensures that session start/end events are still tracked on excluded paths when necessary for session continuity.",
      "implementation_notes": "Navigate to excluded path during session, verify session events still tracked for continuity"
    },
    {
      "id": "config-005",
      "title": "Tag System - Page View Tags",
      "category": "configuration",
      "priority": "medium",
      "description": "Tests that page view events are properly tagged based on URL patterns, device type, and UTM parameters with AND/OR logic.",
      "implementation_notes": "Configure tag rules, verify PAGE_VIEW events tagged correctly based on URL patterns and conditions"
    },
    {
      "id": "config-006",
      "title": "Tag System - Click Event Tags",
      "category": "configuration",
      "priority": "medium",
      "description": "Validates that click events are tagged based on element selectors, attributes, and other conditions with proper logical operators.",
      "implementation_notes": "Configure click tag rules, verify CLICK events tagged based on element selectors and attributes"
    },
    {
      "id": "reliability-001",
      "title": "Library Cleanup - Destroy Functionality",
      "category": "system-reliability",
      "priority": "medium",
      "description": "Validates that TraceLog.destroy() properly cleans up all event listeners, timers, storage, and restores the environment to pre-initialization state.",
      "implementation_notes": "Initialize library, call destroy(), verify all resources cleaned up and environment restored"
    },
    {
      "id": "reliability-002",
      "title": "Memory Management - No Memory Leaks",
      "category": "system-reliability",
      "priority": "medium",
      "description": "Tests that repeated initialization and destruction cycles don't cause memory leaks or accumulate event listeners.",
      "implementation_notes": "Repeatedly initialize and destroy library, monitor for memory leaks and listener accumulation"
    },
    {
      "id": "reliability-003",
      "title": "Activity Detection - User Activity Recognition",
      "category": "system-reliability",
      "priority": "medium",
      "description": "Validates that user activity is properly detected through mouse, keyboard, touch, scroll, and visibility events to maintain active sessions.",
      "implementation_notes": "Simulate different types of user activity, verify activity detection keeps sessions active"
    },
    {
      "id": "reliability-004",
      "title": "Activity Detection - Inactivity Detection",
      "category": "system-reliability",
      "priority": "medium",
      "description": "Tests that user inactivity is correctly identified and triggers appropriate session timeout behavior.",
      "implementation_notes": "Simulate user inactivity, verify inactivity detection triggers session timeout"
    },
    {
      "id": "reliability-005",
      "title": "Multi-Tab Behavior - Tab Coordination",
      "category": "system-reliability",
      "priority": "medium",
      "description": "Validates that multiple tabs coordinate properly through BroadcastChannel for session management and event tracking.",
      "implementation_notes": "Open multiple tabs, verify coordination through BroadcastChannel messaging"
    },
    {
      "id": "reliability-006",
      "title": "Multi-Tab Behavior - Leader Election",
      "category": "system-reliability",
      "priority": "medium",
      "description": "Tests that tab leader election works correctly when tabs are opened/closed and ensures only one tab manages session timing.",
      "implementation_notes": "Test leader election by opening/closing tabs, verify only one tab manages session timing"
    },
    {
      "id": "reliability-007",
      "title": "Data Accuracy - Event Deduplication",
      "category": "system-reliability",
      "priority": "medium",
      "description": "Tests that duplicate events are properly identified and deduplicated while preserving legitimate repeated events.",
      "implementation_notes": "Generate duplicate events, verify deduplication works while preserving legitimate repeats"
    },
    {
      "id": "reliability-008",
      "title": "Data Accuracy - Timestamp Consistency",
      "category": "system-reliability",
      "priority": "medium",
      "description": "Validates that event timestamps are accurate, consistent, and properly ordered in the event queue.",
      "implementation_notes": "Generate events rapidly, verify timestamps are accurate and maintain proper ordering"
    },
    {
      "id": "integration-001",
      "title": "Google Analytics Integration - Initialization",
      "category": "integrations",
      "priority": "low",
      "description": "Tests that Google Analytics integration initializes correctly with valid measurement ID and sends custom events to GA.",
      "implementation_notes": "Configure GA integration, verify gtag initialization and custom event forwarding to GA"
    },
    {
      "id": "integration-002",
      "title": "Google Analytics Integration - Event Forwarding",
      "category": "integrations",
      "priority": "low",
      "description": "Validates that custom TraceLog events are properly forwarded to Google Analytics with correct event names and parameters.",
      "implementation_notes": "Send custom events, verify they're forwarded to GA with correct names and parameters"
    },
    {
      "id": "qa-001",
      "title": "QA Mode - Enhanced Logging",
      "category": "security-qa",
      "priority": "low",
      "description": "Tests that QA mode enables detailed console logging, shows all events including those that would be sampled out, and provides debugging information.",
      "implementation_notes": "Enable QA mode, verify enhanced logging, sampling bypass, and debugging information in console"
    },
    {
      "id": "qa-002",
      "title": "QA Mode - Error Throwing",
      "category": "security-qa",
      "priority": "low",
      "description": "Validates that QA mode throws errors for invalid events and configuration issues that would be silently handled in production.",
      "implementation_notes": "Test invalid events in QA mode, verify errors thrown instead of silent handling"
    },
    {
      "id": "api-001",
      "title": "API Communication - Event Delivery",
      "category": "integrations",
      "priority": "low",
      "description": "Tests that events are successfully delivered to the API endpoint with correct headers, payload structure, and authentication.",
      "implementation_notes": "Mock API endpoint, verify event delivery with correct headers, payload structure, and auth"
    },
    {
      "id": "api-002",
      "title": "API Communication - Network Failure Handling",
      "category": "integrations",
      "priority": "low",
      "description": "Validates retry logic, exponential backoff, and event persistence when API requests fail due to network issues.",
      "implementation_notes": "Simulate network failures, verify retry logic, backoff, and event persistence"
    },
    {
      "id": "api-003",
      "title": "API Communication - Rate Limiting",
      "category": "integrations",
      "priority": "low",
      "description": "Tests that rate limiting is respected and events are properly queued when API rate limits are exceeded.",
      "implementation_notes": "Simulate rate limiting, verify events queued and rate limits respected"
    },
    {
      "id": "config-007",
      "title": "Configuration Loading - Remote Config",
      "category": "configuration",
      "priority": "low",
      "description": "Validates that remote configuration is properly loaded from API, merged with local configuration, and applied to tracking behavior.",
      "implementation_notes": "Mock remote config API, verify config loading, merging with local config, and application"
    },
    {
      "id": "config-008",
      "title": "Configuration Loading - Config Validation",
      "category": "configuration",
      "priority": "low",
      "description": "Tests that invalid configuration responses are handled gracefully with fallback to default configuration.",
      "implementation_notes": "Send invalid config responses, verify graceful handling and fallback to defaults"
    },
    {
      "id": "security-001",
      "title": "Security - XSS Prevention",
      "category": "security-qa",
      "priority": "low",
      "description": "Validates that all user input is properly sanitized to prevent XSS attacks through event names, metadata, or page content.",
      "implementation_notes": "Test XSS patterns in event names and metadata, verify proper sanitization prevents XSS"
    },
    {
      "id": "security-002",
      "title": "Security - Data Sanitization",
      "category": "security-qa",
      "priority": "low",
      "description": "Tests that potentially sensitive data is sanitized according to security patterns and size limits are enforced.",
      "implementation_notes": "Test sensitive data patterns, verify sanitization and size limit enforcement"
    },
    {
      "id": "browser-001",
      "title": "Browser Compatibility - Modern Browser Features",
      "category": "browser-compatibility",
      "priority": "low",
      "description": "Validates that all features work correctly in modern browsers with full API support (Chrome, Firefox, Safari, Edge).",
      "implementation_notes": "Test across modern browsers, verify all features work with full API support"
    },
    {
      "id": "browser-002",
      "title": "Browser Compatibility - Graceful Degradation",
      "category": "browser-compatibility",
      "priority": "low",
      "description": "Tests that library gracefully handles missing APIs (BroadcastChannel, PerformanceObserver, etc.) with appropriate fallbacks.",
      "implementation_notes": "Mock missing browser APIs, verify graceful degradation and fallback behavior"
    },
    {
      "id": "perf-004",
      "title": "Performance Impact - Library Overhead",
      "category": "performance-tracking",
      "priority": "low",
      "description": "Validates that the library has minimal impact on page performance, doesn't block the main thread, and uses passive event listeners where appropriate.",
      "implementation_notes": "Measure library performance impact, verify non-blocking behavior and passive listeners"
    },
    {
      "id": "edge-001",
      "title": "Edge Cases - Rapid Navigation",
      "category": "edge-cases",
      "priority": "low",
      "description": "Tests behavior during rapid page navigation, ensuring events are not lost and session continuity is maintained.",
      "implementation_notes": "Rapidly navigate between pages, verify events not lost and session continuity maintained"
    },
    {
      "id": "edge-002",
      "title": "Edge Cases - Large Payloads",
      "category": "edge-cases",
      "priority": "low",
      "description": "Validates handling of events with large metadata objects, ensuring they are either accepted or gracefully rejected with clear errors.",
      "implementation_notes": "Send events with large metadata, verify handling with acceptance or graceful rejection"
    },
    {
      "id": "integration-003",
      "title": "Integration Testing - Full User Journey",
      "category": "edge-cases",
      "priority": "low",
      "description": "Tests a complete user journey from library initialization through various interactions to session end, validating all events are tracked correctly.",
      "implementation_notes": "Simulate complete user journey, verify all interaction events tracked correctly from start to finish"
    }
  ]
}
